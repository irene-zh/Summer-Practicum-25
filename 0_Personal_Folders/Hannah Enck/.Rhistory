install.packages(dplyr)
> install.packages("dplyr")
train_reg = read.csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_reg = read.csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_reg <- read.csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_reg <- read.csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_reg <- read.csv("D:\Summer Practicum\1_Data\training_regression.csv")
library(readr)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
library(readr)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
train_sel = train %>%
select('Operating_Airline', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
library(tidyverse)
library(tidyverse)
library(readr)
library(dplyr)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_sel = train %>%
select('Operating_Airline', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_sel = training_regression %>%
select('Operating_Airline', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_sel = training_regression %>%
select('Operating_Airline', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_sel = training_regression %>%
select('ArrDel15', 'Operating_Airline', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "backward", k = 2)
train_sel_b6 = training_regression %>%
filter(Operating_Airline == "B6") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel_b6)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel_b6)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_g4 = training_regression %>%
filter(Operating_Airline == "G4") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel_g4)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel_g4)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_ha = training_regression %>%
filter(Operating_Airline == "HA") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel_ha)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel_ha)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_ha = training_regression %>%
filter(Operating_Airline == "HA") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel_ha)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel_ha)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_f9 = training_regression %>%
filter(Operating_Airline == "F9") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel_f9)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel_f9)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_f9 = training_regression %>%
filter(Operating_Airline == "F9") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday_Week', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel_f9)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel_f9)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_f9 = training_regression %>%
filter(Operating_Airline == "F9") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel_f9)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel_f9)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
install.packages(glmnet)
install.packages("glmnet")
train_sel_f9 = training_regression %>%
filter(Operating_Airline == "F9") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel_f9, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel_f9, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel_ha, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel_ha, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel_g4, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel_g4, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel_b6, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel_b6, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_dl = training_regression %>%
filter(Operating_Airline == "DL") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel_dl, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel_dl, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_ua = training_regression %>%
filter(Operating_Airline == "UA") %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel_ua, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel_ua, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_x <- model.matrix(ArrDel15 ~ ., data = train_sel)[, -1]
train_y <- train_sel$ArrDel15
library(glmnet)
train_ridge <- glmnet(x = train_x,  y = train_y, family = "binomial", alpha = 0) #need to say alpha=0 to do ridge regression!!
plot(train_ridge, xvar = "lambda")
train_x <- model.matrix(ArrDel15 ~ ., data = train_sel)[, -1]
train_y <- train_sel$ArrDel15
library(glmnet)
train_ridge <- glmnet(x = train_x,  y = train_y, family = "binomial", alpha = 1) #need to say alpha=0 to do ridge regression!!
train_x <- model.matrix(ArrDel15 ~ ., data = train_sel)[, -1]
train_y <- train_sel$ArrDel15
library(glmnet)
train_ridge <- glmnet(x = train_x,  y = train_y, family = "binomial", alpha = 1) #need to say alpha=0 to do ridge regression!!
plot(train_ridge)
train_x <- model.matrix(ArrDel15 ~ ., data = train_sel)[, -1]
train_y <- train_sel$ArrDel15
library(glmnet)
train_ridge <- glmnet(x = train_x,  y = train_y, family = "binomial", alpha = 1) #need to say alpha=0 to do ridge regression!!
plot(train_ridge)
coef(train_ridge)
library(tidyverse)
library(readr)
library(dplyr)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_sel = training_regression %>%
select('ArrDel15', 'Operating_Airline', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region') %>%
replace(is.na(.), 0)
training_regression <- read_csv("D:/Summer Practicum/1_Data/training_regression.csv")
train_sel = training_regression %>%
select('ArrDel15', 'Operating_Airline', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region', "Size_Class") %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- lm(ArrDel15 ~ . , data = train_sel)
empty.model <- lm(ArrDel15 ~ 1, data = train_sel)
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
train_sel_b6 <- train_sel[train_sel$Operating_Airline == "B6", ]
train_sel_b6 = training_regression %>%
select('ArrDel15', 'DistanceGroup', 'Is_Holiday', 'DayOfWeek', 'hour_of_day', 'Region', "Size_Class") %>%
replace(is.na(.), 0)
# Create full model and empty model
full.model <- glm(ArrDel15 ~ . , data = train_sel_b6, family="binomial")
empty.model <- glm(ArrDel15 ~ 1, data = train_sel_b6, family="binomial")
# k = 2 for AIC selection
for.model <- step(empty.model,
scope = list(lower = empty.model,
upper = full.model),
direction = "forward", k = 2)
